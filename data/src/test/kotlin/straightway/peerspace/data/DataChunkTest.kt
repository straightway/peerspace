/*
 * Copyright 2016 github.com/straightway
 *
 *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package straightway.peerspace.data

import org.junit.jupiter.api.Test
import straightway.testing.flow.Equal
import straightway.testing.flow.expect
import straightway.testing.flow.is_
import straightway.testing.flow.to_
import straightway.testing.testAutoGeneratedDataClassMethods
import straightway.utils.serializeToByteArray
import straightway.utils.deserializeTo

class DataChunkTest {

    private companion object {
        val chunkId = Id("1234")
        val chunkData = "data".toByteArray()
    }

    @Test
    fun `key is as specified in construction`() =
            expect(DataChunk(Key(chunkId), chunkData).key is_ Equal to_ Key(chunkId))

    @Test
    fun `id is same as key`() =
            expect(DataChunk(Key(chunkId), chunkData).id is_ Equal to_ Key(chunkId))

    @Test
    fun `data is as specified in construction`() =
            expect(DataChunk(Key(chunkId), chunkData).data is_ Equal to_ chunkData)

    @Test
    fun `chunks are equal if byte arrays are content equal`() =
            expect(DataChunk(Key(chunkId), chunkData) is_ Equal to_
                           DataChunk(Key(chunkId), ByteArray(chunkData.size) { chunkData[it] }))

    @Test
    fun `Chunk is serializable`() {
        val sut = DataChunk(Key(chunkId), chunkData)
        val serialized = sut.serializeToByteArray()
        val deserialized = serialized.deserializeTo<DataChunk>()
        expect(deserialized.key is_ Equal to_ sut.key)
        expect(deserialized.data contentEquals sut.data)
    }

    @Test
    fun `has serialVersionUID`() =
            expect(DataChunk.serialVersionUID is_ Equal to_ 1L)

    @Test
    fun `auto-generated data class members`() =
            DataChunk(Key(chunkId), chunkData).testAutoGeneratedDataClassMethods()
}