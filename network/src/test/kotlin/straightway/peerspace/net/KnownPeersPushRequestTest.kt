/*
 * Copyright 2016 github.com/straightway
 *
 *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package straightway.peerspace.net

import org.junit.jupiter.api.Test
import straightway.peerspace.data.Id
import straightway.utils.deserializeTo
import straightway.utils.serializeToByteArray
import straightway.testing.bdd.Given
import straightway.testing.flow.Equal
import straightway.testing.flow.Same
import straightway.testing.flow.as_
import straightway.testing.flow.expect
import straightway.testing.flow.is_
import straightway.testing.flow.to_
import straightway.testing.testAutoGeneratedDataClassMethods

class KnownPeersPushRequestTest {

    private companion object {
        val peerIds = listOf(Id("Peer1"), Id("Peer2"))
        val originatorId = Id("originatorId")
    }

    private val test get() = Given {
        object {
            val sut = KnownPeersPushRequest(originatorId, peerIds)
        }
    }

    @Test
    fun testAutoGeneratedDataClassMethods() = test when_ {
        sut
    } then {
        it.result.testAutoGeneratedDataClassMethods()
    }

    @Test
    fun `originatorId is accessible`() =
            test when_ { sut } then { expect(it.result.originatorId is_ Same as_ originatorId) }

    @Test
    fun `knownPeers is accessible`() =
            test when_ { sut } then { expect(it.result.knownPeersIds is_ Same as_ peerIds) }

    @Test
    fun `has serialVersionUID`() =
        expect(KnownPeersPushRequest.serialVersionUID is_ Equal to_ 1L)

    @Test
    fun `is serializable`() =
            test when_ {
                val serialized = sut.serializeToByteArray()
                serialized.deserializeTo<KnownPeersPushRequest>()
            } then {
                expect(it.result is_ Equal to_ sut)
            }

    @Test
    fun `identification is same as the query itself`() =
            test when_ {
                sut.identification
            } then {
                expect(it.result is_ Equal to_ sut.knownPeersIds)
            }

    @Test
    fun `identifications with same known peers are equal`() =
            test when_ {
                sut.copy(originatorId = Id("otherOriginator")).identification
            } then {
                expect(it.result == sut.identification)
            }
}