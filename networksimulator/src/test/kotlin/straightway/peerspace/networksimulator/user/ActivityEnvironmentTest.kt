/*
 * Copyright 2016 github.com/straightway
 *
 *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package straightway.peerspace.networksimulator.user

import com.nhaarman.mockito_kotlin.mock
import org.junit.jupiter.api.Test
import straightway.peerspace.networksimulator.profile.dsl.UsageProfile
import straightway.testing.bdd.Given
import straightway.testing.flow.Same
import straightway.testing.flow.as_
import straightway.testing.flow.expect
import straightway.testing.flow.is_
import straightway.testing.testAutoGeneratedDataClassMethods
import straightway.utils.TimeProvider

class ActivityEnvironmentTest {

    private companion object {
        val TEST_USAGE = UsageProfile("test usage") {}
    }

    @Test
    fun testAutoGeneratedDataClassMethods() =
            ActivityEnvironment(mock(), mock(), mock(), TEST_USAGE)
                    .testAutoGeneratedDataClassMethods()

    @Test
    fun `user is accessible`() {
        val testUser = mock<User>()
        Given {
            ActivityEnvironment(testUser, mock(), mock(), TEST_USAGE)
        } when_ {
            user
        } then {
            expect(it.result is_ Same as_ testUser)
        }
    }

    @Test
    fun `device is accessible`() {
        val testDevice = mock<Device>()
        Given {
            ActivityEnvironment(mock(), testDevice, mock(), TEST_USAGE)
        } when_ {
            device
        } then {
            expect(it.result is_ Same as_ testDevice)
        }
    }

    @Test
    fun `timeProvider is accessible`() {
        val testTimeProvider = mock<TimeProvider>()
        Given {
            ActivityEnvironment(mock(), mock(), testTimeProvider, TEST_USAGE)
        } when_ {
            timeProvider
        } then {
            expect(it.result is_ Same as_ timeProvider)
        }
    }

    @Test
    fun `usage is accessible`() =
            Given {
                ActivityEnvironment(mock(), mock(), mock(), TEST_USAGE)
            } when_ {
                usage
            } then {
                expect(it.result is_ Same as_ TEST_USAGE)
            }
}