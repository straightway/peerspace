/*
 * Copyright 2016 github.com/straightway
 *
 *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package straightway.peerspace.transport

import com.nhaarman.mockito_kotlin.mock
import org.junit.jupiter.api.Test
import straightway.expr.minus
import straightway.peerspace.data.DataChunk
import straightway.peerspace.data.Id
import straightway.testing.bdd.Given
import straightway.testing.flow.Not
import straightway.testing.flow.Same
import straightway.testing.flow.Throw
import straightway.testing.flow.as_
import straightway.testing.flow.does
import straightway.testing.flow.expect
import straightway.testing.flow.is_
import straightway.testing.testAutoGeneratedDataClassMethods
import straightway.units.absolute
import straightway.units.get
import straightway.units.second

class ListQueryCallbackInstancesTest {

    private companion object {
        val listDataKey = ListDataKey(Id("id"), 1[second].absolute)
    }

    @Test
    fun testAutoGeneratedDataClassMethods() =
            ListQueryCallbackInstances().testAutoGeneratedDataClassMethods()

    @Test
    fun `onReceived is accessible`() {
        val callback: (ListDataItem) -> Unit = { println("Hello") }
        Given {
            ListQueryCallbackInstances(onReceived = callback)
        } when_ {
            onReceived
        } then {
            expect(it.result is_ Same as_ callback)
        }
    }

    @Test
    fun `default onReceived callback does not throw`() =
            Given {
                ListQueryCallbackInstances()
            } when_ {
                onReceived(ListDataItem(listDataKey, byteArrayOf()))
            } then {
                expect({ it.result } does Not - Throw.exception)
            }

    @Test
    fun `onTimeout is accessible`() {
        val callback: DataQueryControl.(ListDataKey) -> Unit = { println("Hello") }
        Given {
            ListQueryCallbackInstances(onTimeout = callback)
        } when_ {
            onTimeout
        } then {
            expect(it.result is_ Same as_ callback)
        }
    }

    @Test
    fun `default onTimeout callback does not throw`() =
            Given {
                ListQueryCallbackInstances()
            } when_ {
                mock<DataQueryControl>().onTimeout(listDataKey)
            } then {
                expect({ it.result } does Not - Throw.exception)
            }

    @Test
    fun `onIncomplete is accessible`() {
        val callback: DataQueryControl.(ListDataKey, List<DataChunk>) -> Unit =
                { _, _ -> println("Hello") }
        Given {
            ListQueryCallbackInstances(onIncomplete = callback)
        } when_ {
            onIncomplete
        } then {
            expect(it.result is_ Same as_ callback)
        }
    }

    @Test
    fun `default onIncomplete callback does not throw`() =
            Given {
                ListQueryCallbackInstances()
            } when_ {
                mock<DataQueryControl>().onIncomplete(listDataKey, listOf())
            } then {
                expect({ it.result } does Not - Throw.exception)
            }
}